{"version":3,"sources":["navbar.js","body.js","Footer.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Navbar","style","backgroundColor","margin","color","href","Body","useState","items","setItems","useEffect","axios","get","then","response","console","log","data","meals","catch","error","itemsList","map","obj","className","strMeal","src","strMealThumb","idMeal","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"wLAgBeA,MAbf,WAEE,OAAO,yBAAKC,MAAO,CAACC,gBAAgB,YACnC,0CACA,uBAAGD,MAAO,CAACE,OAAO,OAAQC,MAAM,SAAUC,KAAK,IAA/C,QACA,uBAAGJ,MAAO,CAACE,OAAO,OAAQC,MAAM,SAAUC,KAAK,IAA/C,SACA,uBAAGJ,MAAO,CAACE,OAAO,OAAQC,MAAM,SAAUC,KAAK,IAA/C,gB,uCCsCYC,MAzCf,WACC,IAAD,EACyBC,mBAAS,IADlC,mBACSC,EADT,KACeC,EADf,KAIEC,qBAAU,WACPC,IAAMC,IAAI,gEACTC,MAAK,SAACC,GAEHC,QAAQC,IAAIF,EAASG,MAErBR,EAASK,EAASG,KAAKC,UAExBC,OAAM,SAACC,GACPL,QAAQC,IAAII,QAIhB,IAEA,IAAMC,EAAUb,EAAMc,KAAI,SAACC,GACxB,OAAO,yBAAKC,UAAU,YACnB,2BAAID,EAAIE,SACR,yBAAKC,IAAKH,EAAII,aAAcH,UAAU,cACtC,2BAAID,EAAIK,YAKhB,OAAO,6BACL,yBAAKJ,UAAU,OACZH,KCvBQQ,MAVf,WAEE,OAAO,yBAAK5B,MAAO,CAACC,gBAAgB,YAClC,uBAAGD,MAAO,CAACG,MAAM,UAAjB,6BACD,4BAAQH,MAAO,CAACG,MAAM,UAAtB,+CCWY0B,MAXf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd1B,OAAM,SAAAC,GACLL,QAAQK,MAAMA,EAAM0B,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.50c24640.chunk.js","sourcesContent":["import React from 'react'\r\nimport { directive } from '@babel/types';\r\n\r\nfunction Navbar()\r\n{\r\n  return <div style={{backgroundColor:'#879092'}}>\r\n   <h1>React Meal</h1>\r\n   <a style={{margin:'10px', color:'white'}} href=\"\">Home</a>\r\n   <a style={{margin:'10px', color:'white'}} href=\"\">Order</a>\r\n   <a style={{margin:'10px', color:'white'}} href=\"\">Contact Us</a>\r\n\r\n\r\n  </div>\r\n\r\n}\r\n\r\nexport default Navbar;","import React, { useEffect, useState } from 'react'\r\nimport { directive } from '@babel/types';\r\nimport axios from 'axios'\r\nimport bootstrap from '../node_modules/bootstrap/dist/css/bootstrap.min.css'\r\nimport './body.css'\r\n\r\nfunction Body()\r\n{\r\n   const[items,setItems]=useState([]);\r\n\r\n  // useEffect is lifecycle method gets call before component renders\r\n  useEffect(()=>{\r\n     axios.get('https://www.themealdb.com/api/json/v1/1/filter.php?c=Seafood')\r\n     .then((response)=>{  \r\n        // if request successful\r\n         console.log(response.data);\r\n         // we got array with name meals in response\r\n         setItems(response.data.meals)\r\n\r\n     }).catch((error)=>{ // if request fails\r\n        console.log(error);\r\n\r\n     })  \r\n\r\n  },[])\r\n    // strMeal key to get item name\r\n    const itemsList=items.map((obj)=>{\r\n       return <div className='col-md-4'>\r\n          <p>{obj.strMeal}</p>\r\n          <img src={obj.strMealThumb} className='img-fluid' />\r\n          <p>{obj.idMeal}</p>\r\n\r\n       </div>\r\n    })\r\n\r\n  return <div>\r\n    <div className='row'>\r\n      {itemsList}\r\n    \r\n    \r\n    </div>\r\n\r\n\r\n  </div>\r\n\r\n}\r\n\r\nexport default Body;","import React from 'react'\r\nimport { directive } from '@babel/types';\r\n\r\n\r\nfunction Footer()\r\n{\r\n  return <div style={{backgroundColor:'#6B5771'}}>\r\n    <p style={{color:'white'}}>Designed and Developed by</p>\r\n   <footer style={{color:'white'}}>&copy; Copyright 2020 Pratik Sanjay Bhadane</footer>\r\n\r\n  </div>\r\n\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navbar from './navbar'\nimport Body from './body'\nimport Footer from './Footer'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      <Body/>\n      <Footer/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}